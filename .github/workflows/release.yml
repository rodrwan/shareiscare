name: Release ShareIsCare

on:
  push:
    branches:
      - main # Activa el flujo cuando se hace push a main

permissions:
  contents: write # Necesario para crear releases

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    environment: Production
    env:
      API_TOKEN: ${{ secrets.API_TOKEN }}
      ZONE_ID: ${{ secrets.ZONE_ID }}
      DOMAIN: ${{ secrets.DOMAIN }}
      TUNNEL_NAME: ${{ secrets.TUNNEL_NAME }}
      TUNNEL_URL: ${{ secrets.TUNNEL_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Necesario para obtener todos los tags y commits

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          check-latest: true

      - name: Install templ
        run: go install github.com/a-h/templ/cmd/templ@latest

      - name: Generate templ code
        run: templ generate

      - name: Run tests
        run: go test -v -short ./...

      - name: Compile for Raspberry Pi (ARMv7)
        run: GOOS=linux GOARCH=arm GOARM=7 CGO_ENABLED=0 go build -o /tmp/shareiscare-armv7 main.go

      - name: Clean up Raspberry Pi test
        if: success()
        run: rm -f /tmp/shareiscare-armv7 && echo "✓ La compilación para Raspberry Pi (ARMv7) es correcta"

      - name: Compile for Raspberry Pi Zero (ARMv6)
        run: GOOS=linux GOARCH=arm GOARM=6 CGO_ENABLED=0 go build -o /tmp/shareiscare-armv6 main.go

      - name: Clean up Raspberry Pi Zero test
        if: success()
        run: rm -f /tmp/shareiscare-armv6 && echo "✓ La compilación para Raspberry Pi Zero (ARMv6) es correcta"

      - name: Generate SemVer version number
        id: generate_version
        run: |
          # Obtener el último tag
          git fetch --tags
          LATEST_TAG=$(git tag -l "v*" --sort=-v:refname | head -n 1)

          # Si no hay tags previos, empezar con v0.1.0
          if [ -z "$LATEST_TAG" ]; then
            NEXT_VERSION="v0.1.0"
          else
            # Extraer major, minor y patch del último tag
            MAJOR=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\1/')
            MINOR=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\2/')
            PATCH=$(echo $LATEST_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\3/')

            # Incrementar el número de patch
            PATCH=$((PATCH + 1))

            # Construir la nueva versión
            NEXT_VERSION="v$MAJOR.$MINOR.$PATCH"
          fi

          echo "VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          echo "Versión generada: $NEXT_VERSION"

      - name: Create Git Tag
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git tag -a ${{ env.VERSION }} -m "Release automático ${{ env.VERSION }}"
          git push origin ${{ env.VERSION }}

      - name: Set build directory
        run: echo "BUILD_DIR=./build" >> $GITHUB_ENV

      - name: Create build directory
        run: mkdir -p $BUILD_DIR

      - name: Build for Linux
        run: GOOS=linux GOARCH=amd64 go build -ldflags "-X main.Version=${{ env.VERSION }} -X main.APIToken=${{ env.API_TOKEN }} -X main.ZoneID=${{ env.ZONE_ID }} -X main.Domain=${{ env.DOMAIN }} -X main.TunnelName=${{ env.TUNNEL_NAME }} -X main.TunnelURL=${{ env.TUNNEL_URL }}" -o ${{ env.BUILD_DIR }}/shareiscare-linux-amd64 main.go

      - name: Build for Windows
        run: GOOS=windows GOARCH=amd64 go build -ldflags "-X main.Version=${{ env.VERSION }} -X main.APIToken=${{ env.API_TOKEN }} -X main.ZoneID=${{ env.ZONE_ID }} -X main.Domain=${{ env.DOMAIN }} -X main.TunnelName=${{ env.TUNNEL_NAME }} -X main.TunnelURL=${{ env.TUNNEL_URL }}" -o ${{ env.BUILD_DIR }}/shareiscare-windows-amd64.exe main.go

      - name: Build for macOS
        run: GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.Version=${{ env.VERSION }} -X main.APIToken=${{ env.API_TOKEN }} -X main.ZoneID=${{ env.ZONE_ID }} -X main.Domain=${{ env.DOMAIN }} -X main.TunnelName=${{ env.TUNNEL_NAME }} -X main.TunnelURL=${{ env.TUNNEL_URL }}" -o ${{ env.BUILD_DIR }}/shareiscare-darwin-amd64 main.go

      - name: Build for Raspberry Pi (ARMv7)
        run: GOOS=linux GOARCH=arm GOARM=7 CGO_ENABLED=0 go build -ldflags "-X main.Version=${{ env.VERSION }} -X main.APIToken=${{ env.API_TOKEN }} -X main.ZoneID=${{ env.ZONE_ID }} -X main.Domain=${{ env.DOMAIN }} -X main.TunnelName=${{ env.TUNNEL_NAME }} -X main.TunnelURL=${{ env.TUNNEL_URL }}" -o ${{ env.BUILD_DIR }}/shareiscare-linux-armv7 main.go

      - name: Build for Raspberry Pi Zero (ARMv6)
        run: GOOS=linux GOARCH=arm GOARM=6 CGO_ENABLED=0 go build -ldflags "-X main.Version=${{ env.VERSION }} -X main.APIToken=${{ env.API_TOKEN }} -X main.ZoneID=${{ env.ZONE_ID }} -X main.Domain=${{ env.DOMAIN }} -X main.TunnelName=${{ env.TUNNEL_NAME }} -X main.TunnelURL=${{ env.TUNNEL_URL }}" -o ${{ env.BUILD_DIR }}/shareiscare-linux-armv6 main.go

      - name: Create config.yaml
        run: |
          cat > ${{ env.BUILD_DIR }}/config.yaml << EOL
          # Configuración de ShareIsCare
          port: 8080        # Puerto en el que se ejecutará el servidor
          root_dir: "."     # Directorio raíz para servir archivos (ruta relativa o absoluta)
          title: "ShareIsCare - Comparte tus archivos"  # Título para la interfaz web
          EOL

      - name: Zip binaries
        run: |
          cd ${{ env.BUILD_DIR }}

          # Linux package
          cp config.yaml shareiscare-linux-amd64.yaml
          zip -j shareiscare-linux-amd64.zip shareiscare-linux-amd64 shareiscare-linux-amd64.yaml

          # Windows package
          cp config.yaml shareiscare-windows-amd64.yaml
          zip -j shareiscare-windows-amd64.zip shareiscare-windows-amd64.exe shareiscare-windows-amd64.yaml

          # macOS package
          cp config.yaml shareiscare-darwin-amd64.yaml
          zip -j shareiscare-darwin-amd64.zip shareiscare-darwin-amd64 shareiscare-darwin-amd64.yaml

          # Raspberry Pi package
          cp config.yaml shareiscare-linux-armv7.yaml
          zip -j shareiscare-linux-armv7.zip shareiscare-linux-armv7 shareiscare-linux-armv7.yaml

          # Raspberry Pi Zero package
          cp config.yaml shareiscare-linux-armv6.yaml
          zip -j shareiscare-linux-armv6.zip shareiscare-linux-armv6 shareiscare-linux-armv6.yaml

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: ShareIsCare ${{ env.VERSION }}
          tag_name: ${{ env.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ${{ env.BUILD_DIR }}/shareiscare-linux-amd64.zip
            ${{ env.BUILD_DIR }}/shareiscare-windows-amd64.zip
            ${{ env.BUILD_DIR }}/shareiscare-darwin-amd64.zip
            ${{ env.BUILD_DIR }}/shareiscare-linux-armv7.zip
            ${{ env.BUILD_DIR }}/shareiscare-linux-armv6.zip